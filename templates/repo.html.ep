% layout 'default';


<div class="row">
  <br/>
  %= t h2 => title
  % if (defined $stats) {
      <h4>Absolute values<h4>
      <table role="data">
        <thead>
          <tr>
            <th>Author</th>
            <th>Commits</th>
            <th>Subject limit</th>
            <th>Subject capitalized</th>
            <th>Subject no period</th>
            <th>Subject in imperative</th>
            <th>Body used</th>
            <th>Body limit</th>
            <th>Empty second line</th>
          </tr>
        </thead>
        <tbody>
          % while (my ($email, $author) = each %$stats) {
            % my $count = $author->{empty_second_line}{pass} + $author->{empty_second_line}{fail} + $author->{empty_second_line}{undef};
            <tr>
              %= t td => $email
              %= t td => $count
              %= t td => join '/', @{$author->{subject_limit}}{qw(pass fail undef)}
              %= t td => join '/', @{$author->{capitalize_subject}}{qw(pass fail undef)}
              %= t td => join '/', @{$author->{no_period_subject}}{qw(pass fail undef)}
              %= t td => join '/', @{$author->{imperative_subject}}{qw(pass fail undef)}
              %= t td => join '/', @{$author->{body_used}}{qw(pass fail undef)}
              %= t td => join '/', @{$author->{body_limit}}{qw(pass fail undef)}
              %= t td => join '/', @{$author->{empty_second_line}}{qw(pass fail undef)}
            </tr>
          % }
        </tbody>
      </table>

      <h4>Percentages<h4>
      <table role="data">
        <thead>
          <tr>
            <th>Author</th>
            <th>Commits</th>
            <th>Subject limit</th>
            <th>Subject capitalized</th>
            <th>Subject no period</th>
            <th>Subject in imperative</th>
            <th>Body used</th>
            <th>Body limit</th>
            <th>Empty second line</th>
          </tr>
        </thead>
        <tbody>
          % while (my ($email, $author) = each %$stats) {
            % my $count = $author->{empty_second_line}{pass} + $author->{empty_second_line}{fail} + $author->{empty_second_line}{undef};
            % continue if $count == 0;
            <tr>
              %= t td => $email
              %= t td => $count
              %= t td => sprintf '%.2f%%', $author->{subject_limit}{pass} / $count * 100
              %= t td => sprintf '%.2f%%', $author->{capitalize_subject}{pass} / $count * 100
              %= t td => sprintf '%.2f%%', $author->{no_period_subject}{pass} / $count * 100
              %= t td => sprintf '%.2f%%', $author->{imperative_subject}{pass} / $count * 100
              %= t td => sprintf '%.2f%%', $author->{body_used}{pass} / $count * 100
              %= t(td => eval { sprintf '%.2f%%', $author->{body_limit}{pass} / $author->{body_used}{pass} * 100 } // '-')
              %= t td => eval { sprintf '%.2f%%', $author->{empty_second_line}{pass} / $author->{body_used}{pass} * 100 } // '-'
            </tr>
          % }
        </tbody>
      </table>

  % } else {
    The worker is doing its thing. Respect the thing.
    <script type="text/javascript">
      var parts = window.location.pathname.split('/');
      var repo = parts[parts.length - 1] + "/" + parts[parts.length - 2];

      function poll() {
        console.log("bump");
        $.ajax("/res/repo/" + repo, {
          type: "GET",
          statusCode: {
            200: function (response) {
              console.log("Worker job done. Reloading.");
              console.log(data);
              location.reload();
            },
            202: function (response) {
              console.log("Worker still busy. Trying again in 1000 ms");
              console.log(data);
              setTimeout(poll, 1000);
            }
          }
        });
      }

      poll();
    </script>
  % }
</div>
