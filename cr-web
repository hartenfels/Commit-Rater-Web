#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojo::JSON            qw(decode_json);
use Mojo::Util            qw(slurp);
use File::Spec::Functions qw(catfile);
use List::Util            qw(pairmap);


plugin Minion => {File => 'minion.db'};

app->minion->add_task(rate_commits => sub
{
    my ($job, $args) = @_;
    return if -e $args->{output};
    system qw(make -s stats), pairmap { "$a=$b" } %$args;
});


sub load_stats
{
    my ($c, $user, $repo) = @_;

    my $file  = catfile 'stats', "$user.$repo.json";
    my $stats = eval { decode_json slurp $file };

    if (!$stats)
    {
        $c->minion->enqueue(rate_commits => [{
            user   => $user,
            repo   => $repo,
            output => $file,
        }]);
    }

    return $stats;
}


get '/' => sub { shift->render(template => 'index') };

use Data::Dumper;
get '/repo/:user/:repo' => sub
{
    my $c = shift;
    my ($user, $repo) = @{$c->stash}{'user', 'repo'};
    $c->render_later;

    $c->ua->head("https://github.com/$user/$repo/" => sub
    {
        my ($ua, $tx) = @_;
        return $c->render(text => Dumper($tx)) if not $tx->success;
        #return $c->render(status => $tx->res->code) if not $tx->success;

        $c->title("$user/$repo",
            user  => $user,
            repo  => $repo,
            stats => load_stats($c, $user, $repo),
        );
        $c->render(template => 'repo');
    });
};


get '/res/repo/:user/:repo' => sub
{
    my $c = shift;
    my ($user, $repo) = @{$c->stash}{'user', 'repo'};
    $c->render_later;

    $c->ua->head("https://github.com/$user/$repo/" => sub
    {
        my ($ua, $tx) = @_;
        if (!$tx->success)
        {
            return $c->render(
                text   => 'Error from Github: ' . $tx->res->code,
                status => $tx->res->code,
            );
        }

        if (load_stats($c, $user, $repo))
        {   $c->render(text => 'OK') }
        else
        {   $c->render(text => 'Fetching', status => 202) }
    });
};


app->start;
