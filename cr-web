#!/usr/bin/env perl
use Mojolicious::Lite;
use Data::Dumper;
use File::Path            qw(remove_tree);
use File::Spec::Functions qw(catfile);
use List::Util            qw(pairmap);
use Lock::File            qw(lockfile);
use Mojo::JSON            qw(encode_json decode_json);
use Mojo::Util            qw(slurp spurt);
use lib                   qw(Commit-Rater);
use CommitRater;


our %cfg = (
    commit_limit => 10000,
    eval { %{plugin 'Config'} }
);


plugin Minion => {File => 'minion.db'};

app->minion->add_task(rate_commits => sub
{
    my ($job, $remote, $output) = @_;

    my $lock = lockfile("$output.lock", {blocking => 0, remove => 1}) or return;

    if (!-e $output)
    {
        my $repo  = CommitRater::Repo->new(remote => $remote);
        my $stats = CommitRater->new(repo => $repo)->rate($cfg{commit_limit});
        spurt encode_json($stats) => $output;
        remove_tree($repo->local);
    }
});


sub load_stats
{
    my ($c, $user, $repo, $no_job) = @_;

    my $file  = catfile 'stats', lc "$user.$repo.json";
    my $stats = eval { decode_json slurp $file };

    if (!$stats && !$no_job)
    {
        $c->minion->enqueue(rate_commits => [
            "https://github.com/$user/$repo/",
            $file,
        ]);
    }

    return $stats;
}


get '/' => sub { shift->render(template => 'index') };


get '/repos/:user/:repo' => sub
{
    my $c = shift;
    my ($user, $repo) = @{$c->stash}{'user', 'repo'};
    $c->render_later;

    $c->ua->head("https://github.com/$user/$repo/" => sub
    {
        my ($ua, $tx) = @_;
        return $c->render(text => Dumper($tx)) if not $tx->success;
        #return $c->render(status => $tx->res->code) if not $tx->success;

        $c->title("$user/$repo",
            user  => $user,
            repo  => $repo,
            stats => load_stats($c, $user, $repo),
        );
        $c->render(template => 'repo');
    });
};


get '/res/repos/:user/:repo' => sub
{
    my $c = shift;
    my ($user, $repo) = @{$c->stash}{'user', 'repo'};
    $c->render_later;

    $c->ua->head("https://github.com/$user/$repo/" => sub
    {
        my ($ua, $tx) = @_;
        if (!$tx->success)
        {
            return $c->render(
                json   => {github_error => $tx->res->code},
                status => $tx->res->code,
            );
        }

        if (my $stats = load_stats($c, $user, $repo, 1))
        {   $c->render(json => $stats) }
        else
        {   $c->render(json => {}, status => 202) }
    });
};


app->start;
